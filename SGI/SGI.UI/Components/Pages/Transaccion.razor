@page "/Transacciones"
@inject RepositorioTransaccion repositorioTransaccion
@inject DarAltaTransaccion TransaccionAlta
@inject DarBajaTransaccion TransaccionBaja
@inject NavigationManager Navigation
@inject Usuario usuarioActual
@inject ListarTransacciones TransaccionLista
@rendermode InteractiveServer

<PageTitle>Gestión de Transacciones</PageTitle>

<div class="contenedor">
    <section class="formulario-seccion">
        <h1 class="titulo">Gestión de Transacciones</h1>

        <!-- Formulario Dar Alta Transacción -->
        <h2>Dar Alta Transacción</h2>
        <form @onsubmit="AltaTransaccion">
            <div class="elemento-input">
                <label for="productoId">ID del Producto:</label>
                <input type="number" @bind="_productoIdAlta" id="productoId" required />
            </div>

            <div class="elemento-input">
                <label for="cantidad">Cantidad:</label>
                <input type="number" @bind="_cantidadAlta" id="cantidad" required />
            </div>

            <div class="elemento-input">
                <label for="tipo">Tipo de Transacción:</label>
                <select @onchange="(e) => OnTipoChanged(e.Value.ToString())">
                    <option value="" disabled selected>Seleccione un tipo</option>
                    <option value="entrada">Entrada</option>
                    <option value="salida">Salida</option>
                </select>
            </div>

            <button type="submit" class="boton-inicio">Registrar Transacción</button>
        </form>

        <!-- Formulario Dar Baja Transacción -->
        <h2>Dar Baja Transacción</h2>
        <form @onsubmit="BajaTransaccion">
            <div class="elemento-input">
                <label for="idBaja">ID de la Transacción a Eliminar:</label>
                <input type="text" @bind="_idTransaccionBaja" id="idBaja" required />
            </div>
            <button type="submit" class="boton-inicio">Eliminar Transacción</button>
        </form>
    </section>
<!-- Mostrar listado de transacciones -->
<section class="tabla-transacciones">
    <h2>Listado de Transacciones</h2>
    @if (transacciones != null && transacciones.Count > 0)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Producto ID</th>
                    <th>Cantidad</th>
                    <th>Tipo</th>
                    <th>Fecha</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaccion in transacciones)
                {
                    <tr>
                        <td>@transaccion.id</td>
                        <td>@transaccion._productoId</td>
                        <td>@transaccion._cantidad</td>
                        <td>@transaccion._tipo.ToString()</td>
                        <td>@transaccion._fechaTransaccion</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p class="no-transacciones">No hay transacciones disponibles.</p>
    }
</section>

</div>

@if (!string.IsNullOrEmpty(mensajeDeError))
{
    <div class="error-message">
        @mensajeDeError
    </div>
}

@code {
    private string? mensajeDeError { get; set; }
    private int _productoIdAlta;
    private int _cantidadAlta;
    private string _tipoAltaString;
    private int _idTransaccionBaja;

    private TipoTransaccion _tipoAlta { get; set; }
    private List<SGI.Aplicacion.Transaccion> transacciones = new List<SGI.Aplicacion.Transaccion>();
    protected override async Task OnInitializedAsync()
    {
        await CargarTransacciones();
    }

    private async Task CargarTransacciones() // usando async Task es la unica forma que encontramos para que lista de transacciones no se cargue recien cuando se da de alta o baja alguna
    {
        try
        {
            transacciones =TransaccionLista.Listar();
        }
        catch (Exception ex)
        {
            mensajeDeError = ex.Message;
        }
    }

    private void OnTipoChanged(string e)
    {
        _tipoAlta = e switch
        {
            "entrada" => TipoTransaccion.entrada,
            "salida" => TipoTransaccion.salida,
            _ => _tipoAlta
        };
    }

    private async Task AltaTransaccion()
    {        
        try 
        {
            TransaccionAlta.Ejecutar(usuarioActual.IdUsuario, _productoIdAlta, _cantidadAlta, _tipoAlta);
            await CargarTransacciones();
        }
        catch (Exception ex) 
        {
            mensajeDeError = ex.Message;
        }
    }
    
    private async Task BajaTransaccion()
    {
        try 
        {
            TransaccionBaja.Ejecutar(usuarioActual.IdUsuario, _idTransaccionBaja);
            await CargarTransacciones();
        } 
        catch (Exception ex)
        {
            mensajeDeError = ex.Message;
        }
    }
}
